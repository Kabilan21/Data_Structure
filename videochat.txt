import cv2
import socket
import struct
import pickle
server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
print('Socket created')
server.bind((socket.gethostname(),4777))
print('Socket bind complete')
server.listen(5)


def receive(conn):
    payload_size = struct.calcsize(">L")
    data = b""
    print('receive2')
    while len(data) < payload_size:
        data += conn.recv(10240)
    packed_msg_size = data[:payload_size]
    data = data[payload_size:]
    msg_size = struct.unpack(">L", packed_msg_size)[0]
    while len(data) < msg_size:
        data += conn.recv(10240)
    frame_data = data[:msg_size]
    data = data[msg_size:]
    frame=pickle.loads(frame_data, fix_imports=True, encoding="bytes")
    frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
    cv2.imshow('ImageWindow1',frame)
    cv2.waitKey(1)


def send():
    cap = cv2.VideoCapture(0)
    conn, addr = server.accept()
    encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 90]
    while True:
        print('send1')
        ret, frame = cap.read()
        result, frame = cv2.imencode('.jpg', frame, encode_param)
        data = pickle.dumps(frame, 0)
        size = len(data)
        conn.sendall(struct.pack(">L", size) + data)
        receive(conn)


send()



import socket
import cv2
import pickle
import struct
conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
conn.connect((socket.gethostname(),4777))


def send(frame1):
    print('send2')
    encode_param1 = [int(cv2.IMWRITE_JPEG_QUALITY), 90]
    result1, frame1 = cv2.imencode('.jpg', frame1, encode_param1)
    data1 = pickle.dumps(frame1, 0)
    size1 = len(data1)
    conn.sendall(struct.pack(">L", size1) + data1)



def receive():
    payload_size = struct.calcsize(">L")
    data = b""
    while True:
        print('receive1')
        while len(data) < payload_size:
            data += conn.recv(10240)
        packed_msg_size = data[:payload_size]
        data = data[payload_size:]
        msg_size = struct.unpack(">L", packed_msg_size)[0]
        while len(data) < msg_size:
            data += conn.recv(10240)
        frame_data = data[:msg_size]
        data = data[msg_size:]
        frame=pickle.loads(frame_data, fix_imports=True, encoding="bytes")
        frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
        cv2.imshow('ImageWindow',frame)
        send(frame)
        cv2.waitKey(1)


receive()






















socket.close()





cp -r Original_deocder_A.h5 'faceit_live-master/models/ale_to_oliver'




















